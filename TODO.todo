Libs:
    io-router: 
        - : https://github.com/tdzienniak/io-router/
        - Uses object based routing -> first arg : config -> route-prefix...
        - Uses nested objects for routing
        - Interesting init call with the socket -> https://github.com/tdzienniak/io-router/blob/master/src/index.js
        - Supports rerouting with merged .route object
        - Gets request ( modified socket ) as a route param.

    iosync:
        - : https://github.com/mahdCompany/iosync
        - More of a sync library -> Include functionality in the srocket lib to make sync easy with

    ternion:
        - : https://github.com/michael-kamel/ternion
        - Includes validation
        - Supplied data, and response object, express like.
		- Has wired syntax!

    socketnet:
        - : https://github.com/leon3s/socknet
        - Good docs : http://socknet.io/
        - Object based routing allows for easy code splitting.
        - Has a lifecycle built-in ( before, on, after hooks )
        - Objects can be registered via socket.on(eventObject)
        - Built in sessions.
        - Has some sort of Validation via ArgTypes ?
        - Overall a good quality library.

    Socket.io-Wildcard:
		- : https://github.com/hden/socketio-wildcard
		- Example of a simple middleware

TODOS:
	Folder Structure:
		✔ Move all decorators to src/decorators @done (3/5/2018, 8:20:38 PM)

Unrelated:
	☐ Disqus in docs ?
    Loggers:
        - https://www.npmjs.com/package/socketio-winston-logger

Features for srocket:
	☐ Namespace handling
    ☐ Middlewares
    ☐ Easy Synchronisation
    ☐ Wildcard Event -> Request placeholders -> Expose connection-disconnection... events.
    ☐ Routing -> With controllers ? ( Express like req, res objects ? )
	☐ Redis integration?
	☐ Implement all of these validation rules : https://laravel.com/docs/5.5/validation#available-validation-rules
	☐ Find a way to have model files and have models assotiated with rules
Docs:	
	☐ Write validation docs.

Impementation Details:
	☐ Rethink what should be a default export
	☐ For validation use a mode class-validator inspired aproach.
	☐ IOC Container
	☐ Maybe use socket.io middlewares ?
	☐ Make request generic to the data that is in it -> Remove the data object and move data into the request ( instead of the response ) -> Models
	☐ Typesafe validations ? -> validations: { notNull: true, notEmpty: true }
	☐ Allow for alternative validation methods -> Support models with something like the 'class-validator' package

Tests:
	☐ Add tests :)